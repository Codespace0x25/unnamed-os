/*
 * custom_os
 * Author: bonsall2004
 * Description: 
 */
#pragma once
#include <cstddef>
#include <memory>

namespace std
{
  template <typename T>
  class vector
  {
    public:
      vector();
      ~vector();

      void push_back(const T& value);
      void remove(size_t index);
      T& operator[](size_t index) const;

      size_t size() const;
      size_t capacity() const;
      bool empty() const;
      void clear();

    private:
      T* data;
      size_t _size;
      size_t _capacity;

      void reallocate(size_t new_capacity);
  };

  template <typename T>
  vector<T>::vector() : data(nullptr), _size(0), _capacity(0)
  {
//    data = static_cast<T*>(malloc(sizeof(T)));
  }

  template <typename T>
  vector<T>::~vector()
  {
    if(data)
    {
      free(data);
    }
  }

  template <typename T>
  void vector<T>::push_back(const T& value)
  {
    if(_size >= _capacity)
    {
      size_t new_capacity = (_capacity == 0) ? 1 : _capacity * 2;
      reallocate(new_capacity);
    }
    data[_size] = value;
    _size++;
  }

  template <typename T>
  T& vector<T>::operator[](size_t index) const
  {
    if(index >= _size)
    {
      __asm__ volatile("int $40");
    }
    return data[index];
  }

  template <typename T>
  size_t vector<T>::size() const
  {
    return _size;
  }

  template <typename T>
  size_t vector<T>::capacity() const
  {
    return _capacity;
  }

  template <typename T>
  bool vector<T>::empty() const
  {
    return _size == 0;
  }

  template <typename T>
  void vector<T>::reallocate(size_t new_capacity)
  {
    T* new_data = (T*)malloc(new_capacity * sizeof(T));
    if(!new_data)
    {
      BREAKPOINT
      return;
    }

    for(size_t i = 0; i < _size; i++)
    {
      new_data[i] = data[i];
    }
    if(data != nullptr && _size != 0)
    {
      free(data);
    }

    data = new_data;
    _capacity = new_capacity;
  }

  template <typename T>
  void vector<T>::remove(size_t index)
  {
    if(index >= _size)
    {
      BREAKPOINT
    }

    data[index].~T();
    for(size_t i = index; i < _size - 1; i++)
    {
      data[i] = data[i + 1];
    }
    _size--;
  }

  template <typename T>
  void vector<T>::clear()
  {
    for(size_t i = 0; i < _size; i++)
    {
      data[i].~T();
    }
    _size = 0;
  }
}